// Apply the java plugin to add support for Java

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.5'
}

mainClassName = "de.oliverpabst.PQT.PostgresQueryTool"
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

applicationDefaultJvmArgs = ["-Xmx1g"]

// JavaFX jars are platform dependent following JDK exclusion
def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

//sourceSets {
//    main {
//        java {
//            srcDirs = ["src/main/java"]
//        }
//        resources {
//            srcDirs = ["src/main/resources"]
//        }
//    }
//}

javafx {
    modules = [ 'javafx.fxml', 'javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web']
    version = "13"
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.postgresql:postgresql:42.2.8'
    compile "org.openjfx:javafx-fxml:13:${platform}"
    compile "org.openjfx:javafx-base:13:${platform}"
    compile "org.openjfx:javafx-graphics:13:${platform}"
    compile "org.openjfx:javafx-controls:13:${platform}"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
